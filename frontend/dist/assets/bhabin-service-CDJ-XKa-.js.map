{"version":3,"file":"bhabin-service-CDJ-XKa-.js","sources":["../../src/services/bhabin-service.ts"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\r\n\r\nimport type {\r\n  BhabinAssignment,\r\n  EscortRequest,\r\n  EscortRequestPayload,\r\n  HarvestVerification,\r\n  HarvestVerificationPayload,\r\n  PlantConditionPayload,\r\n  PlantConditionReport,\r\n  RecipientVerification,\r\n  VerifyRecipientPayload,\r\n} from \"@/types/bhabin\";\r\nimport apiClient from \"@/services/http\";\r\nimport {\r\n  mockBhabinRecipients,\r\n  mockEscortRequests,\r\n  mockHarvestVerifications,\r\n  mockPlantProgress,\r\n  mockPplAssignments,\r\n} from \"@/utils/mock-data\";\r\n\r\nconst STORAGE_KEY = {\r\n  recipients: \"sip3s.bhabin.recipients\",\r\n  plant: \"sip3s.bhabin.plant\",\r\n  harvest: \"sip3s.bhabin.harvest\",\r\n  escort: \"sip3s.bhabin.escort\",\r\n} as const;\r\n\r\nconst readLocal = <T>(key: string, fallback: T): T => {\r\n  if (typeof window === \"undefined\") return fallback;\r\n  try {\r\n    const raw = window.localStorage.getItem(key);\r\n    if (!raw) {\r\n      window.localStorage.setItem(key, JSON.stringify(fallback));\r\n      return fallback;\r\n    }\r\n    const parsed = JSON.parse(raw) as T;\r\n    return parsed ?? fallback;\r\n  } catch (error) {\r\n    console.warn(\"Gagal membaca cache Bhabin\", error);\r\n    return fallback;\r\n  }\r\n};\r\n\r\nconst persistLocal = <T>(key: string, value: T) => {\r\n  if (typeof window === \"undefined\") return;\r\n  try {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    console.warn(\"Gagal menyimpan cache Bhabin\", error);\r\n  }\r\n};\r\n\r\nclass BhabinService {\r\n  async listAssignments(email: string | undefined): Promise<BhabinAssignment[]> {\r\n    if (!email) return [];\r\n    try {\r\n      const { data } = await apiClient.get<BhabinAssignment[]>(\"/bhabin/assignments\", { params: { email } });\r\n      return data;\r\n    } catch (_error) {\r\n      return mockPplAssignments\r\n        .filter((assignment) => assignment.bhabinEmail === email)\r\n        .map((assignment) => ({\r\n          id: assignment.id,\r\n          bhabinEmail: assignment.bhabinEmail,\r\n          wilayahId: assignment.wilayahId,\r\n          wilayahName: assignment.wilayahName,\r\n          kecamatan: assignment.kecamatan,\r\n          desa: assignment.desa,\r\n          pplEmail: assignment.pplEmail,\r\n        }));\r\n    }\r\n  }\r\n\r\n  async listRecipients(): Promise<RecipientVerification[]> {\r\n    try {\r\n      const { data } = await apiClient.get<RecipientVerification[]>(\"/bhabin/recipients\");\r\n      return data;\r\n    } catch (_error) {\r\n      return readLocal(STORAGE_KEY.recipients, mockBhabinRecipients);\r\n    }\r\n  }\r\n\r\n  async verifyRecipient(payload: VerifyRecipientPayload): Promise<RecipientVerification> {\r\n    try {\r\n      const { data } = await apiClient.post<RecipientVerification>(\"/bhabin/recipients/verify\", payload);\r\n      return data;\r\n    } catch (_error) {\r\n      const list = readLocal(STORAGE_KEY.recipients, mockBhabinRecipients);\r\n      const next = list.map((item) =>\r\n        item.id === payload.id\r\n          ? {\r\n              ...item,\r\n              status: \"verified\" as const,\r\n              verifiedAt: new Date().toISOString(),\r\n              notes: payload.notes,\r\n              lokasi: payload.lokasi,\r\n              fotoEvidence: payload.fotoEvidence,\r\n              productType: payload.productType,\r\n              seedType: payload.seedType,\r\n              seedQuantityKg: payload.seedQuantityKg,\r\n              pupukNpkKg: payload.pupukNpkKg,\r\n              pupukUreaKg: payload.pupukUreaKg,\r\n            }\r\n          : item\r\n      );\r\n      persistLocal(STORAGE_KEY.recipients, next);\r\n      return (\r\n        next.find((item) => item.id === payload.id) ?? {\r\n          ...mockBhabinRecipients[0],\r\n          status: \"verified\" as const,\r\n          verifiedAt: new Date().toISOString(),\r\n          notes: payload.notes,\r\n          lokasi: payload.lokasi,\r\n          fotoEvidence: payload.fotoEvidence,\r\n          productType: payload.productType,\r\n          seedType: payload.seedType,\r\n          seedQuantityKg: payload.seedQuantityKg,\r\n          pupukNpkKg: payload.pupukNpkKg,\r\n          pupukUreaKg: payload.pupukUreaKg,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  async listPlantProgress(): Promise<PlantConditionReport[]> {\r\n    try {\r\n      const { data } = await apiClient.get<PlantConditionReport[]>(\"/bhabin/plant-progress\");\r\n      return data;\r\n    } catch (_error) {\r\n      return readLocal(STORAGE_KEY.plant, mockPlantProgress);\r\n    }\r\n  }\r\n\r\n  async submitPlantProgress(payload: PlantConditionPayload & { reporter: string }): Promise<PlantConditionReport> {\r\n    try {\r\n      const { data } = await apiClient.post<PlantConditionReport>(\"/bhabin/plant-progress\", payload);\r\n      return data;\r\n    } catch (_error) {\r\n      const nextRecord: PlantConditionReport = {\r\n        id: uuid(),\r\n        wilayah: payload.wilayah,\r\n        petani: payload.petani,\r\n        komoditas: payload.komoditas,\r\n        fase: payload.fase,\r\n        kondisi: payload.kondisi,\r\n        catatan: payload.catatan,\r\n        updatedAt: new Date().toISOString(),\r\n        lokasi: payload.lokasi,\r\n        fotoEvidence: payload.fotoEvidence,\r\n        pupukDigunakanKg: payload.pupukDigunakanKg,\r\n        luasLahanBersihM2: payload.luasLahanBersihM2,\r\n        bibitDitanamKg: payload.bibitDitanamKg,\r\n      };\r\n      const list = [nextRecord, ...readLocal(STORAGE_KEY.plant, mockPlantProgress)];\r\n      persistLocal(STORAGE_KEY.plant, list);\r\n      return nextRecord;\r\n    }\r\n  }\r\n\r\n  async listHarvestVerifications(): Promise<HarvestVerification[]> {\r\n    try {\r\n      const { data } = await apiClient.get<HarvestVerification[]>(\"/bhabin/harvests\");\r\n      return data;\r\n    } catch (_error) {\r\n      return readLocal(STORAGE_KEY.harvest, mockHarvestVerifications);\r\n    }\r\n  }\r\n\r\n  async submitHarvestVerification(payload: HarvestVerificationPayload & { verifier: string }): Promise<HarvestVerification> {\r\n    try {\r\n      const { data } = await apiClient.post<HarvestVerification>(\"/bhabin/harvests\", payload);\r\n      return data;\r\n    } catch (_error) {\r\n      const record: HarvestVerification = {\r\n        id: uuid(),\r\n        petani: payload.petani,\r\n        komoditas: payload.komoditas,\r\n        luasPanenHa: payload.luasPanenHa,\r\n        produksiTon: payload.produksiTon,\r\n        lokasi: payload.lokasi,\r\n        diverifikasiAt: new Date().toISOString(),\r\n        keterangan: payload.keterangan,\r\n        koordinat: payload.koordinat,\r\n        fotoEvidence: payload.fotoEvidence,\r\n      };\r\n      const list = [record, ...readLocal(STORAGE_KEY.harvest, mockHarvestVerifications)];\r\n      persistLocal(STORAGE_KEY.harvest, list);\r\n      return record;\r\n    }\r\n  }\r\n\r\n  async listEscortRequests(): Promise<EscortRequest[]> {\r\n    try {\r\n      const { data } = await apiClient.get<EscortRequest[]>(\"/bhabin/escorts\");\r\n      return data;\r\n    } catch (_error) {\r\n      return readLocal(STORAGE_KEY.escort, mockEscortRequests);\r\n    }\r\n  }\r\n\r\n  async submitEscortRequest(payload: EscortRequestPayload): Promise<EscortRequest> {\n    try {\n      const { data } = await apiClient.post<EscortRequest>(\"/bhabin/escorts\", payload);\n      const cached = readLocal(STORAGE_KEY.escort, mockEscortRequests);\n      const nextCache = [data, ...cached.filter((item) => item.id !== data.id)];\n      persistLocal(STORAGE_KEY.escort, nextCache);\n      return data;\n    } catch (_error) {\n      const record: EscortRequest = {\n        id: uuid(),\n        wilayah: payload.wilayah,\n        jadwal: payload.jadwal,\n        titikKumpul: payload.titikKumpul,\r\n        estimasiPeserta: payload.estimasiPeserta,\r\n        kebutuhanPersonel: payload.kebutuhanPersonel,\r\n        status: \"baru\",\r\n        catatan: payload.catatan,\r\n        diajukanOleh: payload.diajukanOleh,\r\n        diajukanAt: new Date().toISOString(),\r\n      };\r\n      const list = [record, ...readLocal(STORAGE_KEY.escort, mockEscortRequests)];\n      persistLocal(STORAGE_KEY.escort, list);\n      return record;\n    }\n  }\n\n  async updateEscortStatus(id: string, status: EscortRequest[\"status\"]): Promise<EscortRequest | null> {\n    try {\n      const { data } = await apiClient.patch<EscortRequest>(`/bhabin/escorts/${id}`, { status });\n      const list = readLocal(STORAGE_KEY.escort, mockEscortRequests);\n      const next = list.some((item) => item.id === data.id)\n        ? list.map((item) => (item.id === data.id ? data : item))\n        : [data, ...list];\n      persistLocal(STORAGE_KEY.escort, next);\n      return data;\n    } catch (_error) {\n      const list = readLocal(STORAGE_KEY.escort, mockEscortRequests);\n      const index = list.findIndex((item) => item.id === id);\n      if (index === -1) {\n        return null;\n      }\n      const updated: EscortRequest = { ...list[index], status };\n      const next = list.map((item) => (item.id === id ? updated : item));\n      persistLocal(STORAGE_KEY.escort, next);\n      return updated;\n    }\n  }\n}\n\nexport const bhabinService = new BhabinService();\n\r\n"],"names":["STORAGE_KEY","readLocal","key","fallback","raw","error","persistLocal","value","BhabinService","email","data","apiClient","mockPplAssignments","assignment","mockBhabinRecipients","payload","next","item","mockPlantProgress","nextRecord","uuid","list","mockHarvestVerifications","record","mockEscortRequests","cached","nextCache","id","status","index","updated","bhabinService"],"mappings":"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"}